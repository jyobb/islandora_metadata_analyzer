<?php

/**
 * @file
 * Hook implementations.
 */

/**
 * Implements hook_init().
 * Add ajax and javascript
 */
function islandora_metadata_analyzer_init(){
  drupal_add_js('misc/jquery.form.js');
  drupal_add_library('system', 'drupal.ajax');
}

/**
 * Implements hook_menu().
 */
function islandora_metadata_analyzer_menu() {
  $items = array();

  $items['metadata_analyzer'] = array(
    'title' => 'Islandora Metadata Analyzer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_metadata_analyzer_form'),
    'access arguments' => array('administer site configuration'),
    'expanded' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['metadata_analyzer/results'] = array(
    'title' => 'Metadata Analysis Results',
    'page callback' => 'islandora_metadata_analyzer_results',
    'file' => 'includes/analyzerViews.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['metadata_analyzer/searchReplace'] = array(
    'title' => 'Islandora Metadata Search Replace',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_metadata_analyzer_search_replace_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['metadata_analyzer/elementCount'] = array(
    'title' => 'Collection Element Analysis Results',
    'page callback' => 'islandora_metadata_analyzer_element_counts',
    'page arguements' => array(1),
    'file' => 'includes/analyzerViews.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );  
  $items['islandora_metadata_analyzer/ajax-path'] = array(
    'title' => 'Collection Element Analysis Results',
    'page callback' => 'islandora_metadata_analyzer_path_ajax',
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['islandora_metadata_analyzer/ajax-data'] = array(
    'title' => 'Collection Element Analysis Results',
    'page callback' => 'islandora_metadata_analyzer_data_ajax',
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['islandora_metadata_analyzer/downloads'] = array(
    'title' => 'Collection Element Analysis Results',
    'page callback' => 'islandora_metadata_analyzer_download_pids',
    'page arguements' => array(1),
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * @params database id of metadata entry in islandora_metadata_analyzer_path_data table
 *
 * Query database for list of pids and send file to user
 *
 */
function islandora_metadata_analyzer_download_pids($path_data_id){

  $data_title = db_query("select * from {islandora_metadata_analyzer_path_data}  where path_data_id = :path_data_id", array(":path_data_id" => $path_data_id))->fetchObject(); 

  $data_data = db_query("select * from {islandora_metadata_analyzer_data_pids} where path_data_id = :path_data_id", array(":path_data_id" => $path_data_id)); 

  $out = "";
  foreach($data_data as $data_content){
    $out.= $data_content->pid_id . ', ';
  }

  header("Content-Type: text/plain"); //the content type that I am exporting
  header("Content-Disposition: Attachment; filename=". $data_title->path_data);
  header("Pragma: no-cache"); //I don't want this to be cached because it is constantly changing
  echo $out;
  exit(0);

}

/*
 * @params queryType path_id for data
 *
 * Ajax function that updates page with pids
 * 
 */
function islandora_metadata_analyzer_data_ajax($type='ajax', $path_data_id=0){
  $output = islandora_metadata_analyzer_load_data_data($path_data_id);
  
  if($type == 'ajax'){
    $commands = array();
    $commands[] = ajax_command_replace('#datadata-'.$path_data_id, $output);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  } 

}


/*
 * @params path_data_id for data
 *
 * Ajax helper function that retrieves data pids
 *
 */
function islandora_metadata_analyzer_load_data_data($path_data_id){

$data_data = db_query("select * from {islandora_metadata_analyzer_data_pids} p where p.path_data_id = :path_data_id", array(":path_data_id" => $path_data_id)); 
$out = "";
foreach($data_data as $data_content){
  $out.= '<div id="datadata-' . $data_content->pid_id . '">' . $data_content->pid . '</div>';
}
return $out;
}

/*
 * @params queryType path_id for data
 *
 * Ajax function that updates page with element data
 * 
 */
function islandora_metadata_analyzer_path_ajax($type='ajax', $path_id=0){
  $output = islandora_metadata_analyzer_load_path_data($path_id);
  
  if($type == 'ajax'){
    $commands = array();
    $commands[] = ajax_command_replace('#pathdata-'.$path_id, $output);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  } 

}

/*
 * @params path_id for data
 *
 * Ajax helper function that retrieves data data
 *
 */
function islandora_metadata_analyzer_load_path_data($path_id){

$path_data = db_query("select * from {islandora_metadata_analyzer_path_data} p where p.path_id = :path_id", array(":path_id" => $path_id)); 
$out = "";
foreach($path_data as $path_content){

  $link = l(t($path_content->path_data), 'islandora_metadata_analyzer/ajax-data/nojs/' . $path_content->path_data_id, array('attributes' => array('class' => array('use-ajax'))));

  $downloadlink = l(t("Download PIDS for " . $path_content->path_data), 'islandora_metadata_analyzer/downloads/' . $path_content->path_data_id );

  $out.= '<div id="pathdata-' . $path_content->path_data_id . '">' . $link . '</div><div id="datadata-' . $path_content->path_data_id . '"></div><div>' . $downloadlink . '</div>';
}
return $out;
}

/*
 * implements hook_theme
 *
 * Theme functions for output
 *
 */
function islandora_metadata_analyzer_theme($existing, $type, $theme, $path) {
    return array(
        'results_list' => array(
            'variables' => array(
              'resultArray' => NULL,
            ),
            'template' => 'theme/islandora-metadata-analyzer-result-list', // do not include .tpl.php
            'path' => drupal_get_path('module', 'islandora_metadata_analyzer'), '/theme',
        ),
        'element_count' => array(
            'variables' => array(
	      'result_id' => NULL,		
              'title' => NULL,
              'pid' => NULL,
              'query_time' => NULL,
              'countArray' => NULL,
              'record_count' => NULL,
              'path_data' => NULL,
            ),
            'template' => 'theme/islandora-metadata-analyzer-element-count', // do not include .tpl.php
            'path' => drupal_get_path('module', 'islandora_metadata_analyzer'), '/theme',
        ),
    );
}

/*
 *  stub callback to manipulate and set variables for theme
 */
function template_preprocess_results_list(&$vars) {
  // This variable will be available in the template file as $custom_value

}

/*
 * Implements template_preprocess_hook
 *
 * Unserialize array for theme
 *
 */
function template_preprocess_element_count(&$vars) {
  //unserialize object
  $vars['countArray'] = unserialize($vars['countArray']);
}



/*
 * implements hook_form()
 * @params $form form_state
 *
 * Form for selecting repair parameters
 *
 */
function islandora_metadata_analyzer_search_replace_form($form, &$form_state){

  $form['metadata_stream'] = array(
    '#type' => 'select',
    '#title' => t('Metadata Stream'),
    '#options' => drupal_map_assoc(array(t('DC'), t('MODS'))),
    '#description' => t('Select the metadata stream to analyze.'),
  );
  $form['path_to_element'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#default_value' => '/language/languageTerm@authority=iso639-2b,type=code,',
    '#required' => TRUE,
    '#title' => t('Path to Element'),
  );
  $form['old_data'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => 'eng',
    '#required' => TRUE,
    '#title' => t('Old Data'),
  );
  $form['new_data'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => 'dutch',
    '#required' => TRUE,
    '#title' => t('New Data'),
  );
  $form['pid_list'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#default_value' => 'islandora:43, islandora:1542',
    '#required' => TRUE,
    '#title' => t('PIDs to Repair'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );

return $form;

}

/*
 * implements hook_submit
 *
 * Collect input and pass to processing functions
 *
 */
function islandora_metadata_analyzer_search_replace_form_submit($form, &$form_state){


$params = array('stream' => $form_state['values']['metadata_stream'], 
                'path' => $form_state['values']['path_to_element'],
                'old_data' => $form_state['values']['old_data'],
                'new_data' => $form_state['values']['new_data'],
                'pid_list' => $form_state['values']['pid_list'],
               );  

module_load_include('inc', 'islandora_metadata_analyzer', 'includes/search_replace');

islandora_metadata_analyzer_search_replace($params);

return $form;

}


/*
 * implements hook_form()
 * @params $form form_state
 *
 * Form for selecting analysis parameters
 *
 */
function islandora_metadata_analyzer_form($form, &$form_state){
  $form['results_link'] = array(
    '#markup' => '<a href="metadata_analyzer/results">View Results</a>',
  );
  $form['result_set_title'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#required' => TRUE,
    '#title' => t('Title of result set'),
  );
  $form['metadata_stream'] = array(
    '#type' => 'select',
    '#title' => t('Metadata Stream'),
    '#options' => drupal_map_assoc(array(t('DC'), t('MODS'))),
    '#description' => t('Select the metadata stream to analyze.'),
  );
  $form['collection_pid'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#required' => TRUE,
    '#title' => t('PID of collection to analyze'),
  );
  $form['capture_fields'] = array(
    '#type' => 'textarea',
    '#cols' => 128,
    '#rows' => 5,
    '#required' => FALSE,
    '#title' => t('Comma separated list of top level elements to capture'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );
return $form;
}

/*
 * hook_validata stub
 *
 */
function islandora_metadata_analyzer_form_validate($form, &$form_state){
  
}

/*
 * implements hook_submit
 *
 * Collect input and pass to processing functions
 *
 */
function islandora_metadata_analyzer_form_submit($form, &$form_state){

$stream = $form_state['values']['metadata_stream'];
$collection_pid = $form_state['values']['collection_pid'];
$result_set_title = $form_state['values']['result_set_title'];
$capture_fields = $form_state['values']['capture_fields'];
//$capture_options = $form_state['values']['capture_options'];
$params = array('capture_fields' => $capture_fields, 'result_set_title' => $result_set_title);  
drupal_set_message(t('form submitted'));

module_load_include('inc', 'islandora_metadata_analyzer', 'includes/analyzer');

islandora_metadata_analyzer($collection_pid, $stream, $params);

return $form;

}



